// memory layout ===============================================================
// byte 0 BITFIELD (12 bytes)
// byte 1
// byte 2
// byte 3
// byte 4
// byte 5
// byte 6
// byte 7
// byte 8
// byte 9
// byte 10
// byte 11
// byte 12
// byte 13
// byte 14
// byte 15
// byte 16
// byte 17
// byte 18
// byte 19
// byte 20
// byte 21
// byte 22
// byte 23
// TOTAL: 6 words -> 24 bytes

// TODO why can't this be 6 words?
// TODO see https://github.com/mmore500/wse-async-ga/issues/4
//! {
//!     "nWav": (7, pl.UInt8),
//! }

// module config specs ========================================================
const gSize: u16 = 7;
const genome_t = [gSize]u32;
const genomePtr_t = [*]u32;
const nTraitVals: u16 = 1;
const hasImmClobber: bool = false;

const val1: u32 = 1692398096;
const val2: u32 = 2816128869;
const val3: u32 = 2428220313;
const val4: u32 = 1428255001;
const val5: u32 = 1002100039;
const val6: u32 = 3010301098;

fn _validate(genome: genomePtr_t) bool {
    return (
        (genome[0] == val1)
        and (genome[1] == val2)
        and (genome[2] == val3)
        and (genome[3] == val4)
        and (genome[4] == val5)
        and (genome[5] == val6)
    );
}

// public API =================================================================
fn elapse_inheritance_of(genome: genomePtr_t) void {
    @assert(_validate(genome));
}

fn calc_fitness_of(genome: genomePtr_t) f32 {
    @assert(_validate(genome));
    return 0.0;
}

fn get_trait_value(genome: genomePtr_t) u32 { return 0; }

fn initialize_one(genome: genomePtr_t) void {
    genome[0] = val1;
    genome[1] = val2;
    genome[2] = val3;
    genome[3] = val4;
    genome[4] = val5;
    genome[5] = val6;
    @assert(_validate(genome));
}

fn clobber_immigrant(resident: genomePtr_t, immigrant: genomePtr_t) void { }

const dsd = @import_module("cerebraslib/dsd.csl");

/// Toggle the nth bit in a bitfield.
fn flip_nth_bit(bitfield: [*]u8, n: u16) void {
    const byteIndex = n >> 3; // right shift by 3 bits to divide by 8
    const bitPosition = n & 7; // AND with 111 find the remainder modulo 8
    const bitMask = @as(u8, 1) << bitPosition; // mask with the nth bit set
    bitfield[byteIndex] ^= bitMask; // use XOR to flip the nth bit
}

fn set_nth_bit(bitfield: [*]u8, n: u16, value: bool) void {
    const byteIndex = n >> 3; // right shift by 3 bits to divide by 8
    const bitPosition = n & 7; // AND with 111 find the remainder modulo 8
    const bitMask = @as(u8, 1) << bitPosition; // mask with the nth bit set
    if (value) {
        bitfield[byteIndex] |= bitMask; // use OR to set the nth bit
    } else {
        bitfield[byteIndex] &= ~bitMask; // use AND to clear the nth bit
    }
}

// Toggle the nth bit in a bitfield, with desired bit/byte endianness.
// WARNING: note that bitfield size must be a multiple of 4 bytes.
fn flip_nth_bit_with_swaps(
    bitfield: [*]u8,
    n: u16,
    comptime kwargs: comptime_struct,
) void {
    const byteSwap = kwargs.byteSwap;
    const bitSwap = kwargs.bitSwap;

    const logicalByteIndex = n >> 3; // right shift by 3 bits to divide by 8
    const realByteIndex = if (byteSwap)
        logicalByteIndex ^ 3 // XOR with 3 to byteswap
    else
        logicalByteIndex;

    const logicalBitPosition = n & 7; // AND with 111 find the remainder mod 8
    const bitMask = if (bitSwap)
        @as(u8, 0b10000000) >> logicalBitPosition
    else
        @as(u8, 0b00000001) << logicalBitPosition; // mask with the nth bit set

    bitfield[realByteIndex] ^= bitMask; // use XOR to flip the nth bit
}

// Set the nth bit in a bitfield, with desired bit/byte endianness.
// WARNING: note that bitfield size must be a multiple of 4 bytes.
fn set_nth_bit_with_swaps(
    bitfield: [*]u8,
    n: u16,
    value: bool,
    comptime kwargs: comptime_struct,
) void {
    const byteSwap = kwargs.byteSwap;
    const bitSwap = kwargs.bitSwap;

    const logicalByteIndex = n >> 3; // right shift by 3 bits to divide by 8
    const realByteIndex = if (byteSwap)
        logicalByteIndex ^ 3 // XOR with 3 to byteswap
    else
        logicalByteIndex;

    const logicalBitPosition = n & 7; // AND with 111 find the remainder mod 8
    const bitMask = if (bitSwap)
        @as(u8, 0b10000000) >> logicalBitPosition
    else
        @as(u8, 0b00000001) << logicalBitPosition; // mask with the nth bit set

    if (value) {
        bitfield[realByteIndex] |= bitMask; // use OR to set the nth bit
    } else {
        bitfield[realByteIndex] &= ~bitMask; // use AND to clear the nth bit
    }
}

fn _random16() u16 { return @random16(); }  // for map compat

/// Randomize a bitfield.
fn randomize(bitfield: [*]u16, n: u16) void {
    const templateDsd = dsd.get_dsd_repeat16(0);
    // Can't use @get_dsd without comptime ptr...
    const dsd = @set_dsd_length(
        @set_dsd_stride(@set_dsd_base_addr(templateDsd, bitfield), 1), n,
    );
    @map(_random16, dsd);
}

fn mutate_log2p(
    bitfield: [*]u16,
    n: u16,
    log2p: u8,
) void {
    for (@range(u16, n)) |i| {
        var mask: u16 = 0xFFFF;
        for (@range(u8, log2p)) |_| { mask &= @random16(); }
        bitfield[i] ^= mask;
    }
}

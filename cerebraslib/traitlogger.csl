param symbolName: comptime_string;

// module imports =============================================================
const compconf = @import_module("<compconf>");
comptime { // access via get_value for logging...
    const _ = compconf.get_value(
        "CEREBRASLIB_TRAITLOGGER_DSTREAM_ALGO_NAME",
        comptime_string,
    );
} // ... raw string works around sdk v1.0.0 limitation
const compconf_raw = @import_module("<compconf_raw>");
const dstream_algo_name = compconf_raw.CEREBRASLIB_TRAITLOGGER_DSTREAM_ALGO_NAME;

const num_bits = compconf.get_value("CEREBRASLIB_TRAITLOGGER_NUM_BITS", u32);
const dilation = compconf.get_value("CEREBRASLIB_TRAITLOGGER_DILATION", u32);

// configure implementation ===================================================
const logger = @import_module("cerebraslib/bitlogger.csl", .{
    .numBits = num_bits,
    .dstreamAlgoName = dstream_algo_name,
    .symbolName = symbolName,
});

// global variables ===========================================================
var _T: u32 = 0;

// public API =================================================================
fn update(sample: bool) void {
    if (_T % dilation == 0) logger.update(sample);
    _T += 1;
}

name: Continuous Integration

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test-ziglib:
    name: Test ziglib
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
            version: 0.11.0

      - name: Build ziglib
        run: zig build
        working-directory: ./ziglib

      - name: Run test script
        run: ./ziglib/test.sh

      - name: Run benchmarks
        run: ./ziglib/zig-out/bin/ziglib_benchmark

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Concatenate output
        run: ls -1 /tmp/a=benchmark-zig-hsurf+policy=*+ext=.csv | python3 -m joinem /tmp/a=benchmark-zig-hsurf+ext=.csv

      - name: Upload output as artifact
        uses: actions/upload-artifact@v2
        with:
          name: benchmark-zig-hsurf
          path: /tmp/a=benchmark-zig-hsurf+ext=.csv


  test-pylib:
    name: Test pylib
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run test script
        run: ./pylib/test.sh

  test-csl-kernels:
    name: Test csl kernels
    runs-on: ubuntu-latest
    if: ${{ github.event.repository.name == 'wse-sketches-mirror' }}
    env:
      CSLC: cslc
      CS_PYTHON: cs_python
      SINGULARITYENV_CSL_SUPPRESS_SIMFAB_TRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

      - name: Set up Apptainer
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm2cpio
          sudo apt-get install -y golang-go
          mkdir -p ~/apptainer
          # echo 'export PATH="$HOME/apptainer/bin:$PATH"' >> ~/.bashrc
          echo "$HOME/apptainer/bin" >> $GITHUB_PATH
          curl -s https://raw.githubusercontent.com/apptainer/apptainer/d77d6f1eb099855f284a482992140d5eeb18be8a/tools/install-unprivileged.sh | bash -s - ~/apptainer

      - name: Test Apptainer
        run: |
          apptainer --version

      - name: Set up SDK
        run: |
          mkdir -p ~/cerebras/bin
          curl -L "${CEREBRAS_SDK_URL}" | tar -xzv -C ~/cerebras/bin
          echo "$HOME/cerebras/bin" >> $GITHUB_PATH
        env:
          CEREBRAS_SDK_URL: ${{ secrets.CEREBRAS_SDK_URL }}

      - name: Test SDK
        run: |
          cslc -h
          csdb --help
          cs_python -h
          cs_readelf -h
          sdk_debug_shell --help
          echo "SINGULARITYENV_CSL_SUPPRESS_SIMFAB_TRACE ${SINGULARITYENV_CSL_SUPPRESS_SIMFAB_TRACE}"

      - name: Test self-driving
        run: |
          ./kernel-self-driving/compile.sh
          ./kernel-self-driving/execute.sh

      - name: Test memcpy
        run: |
          ./kernel-test-memcpy/compile.sh
          ./kernel-test-memcpy/execute.sh

      - name: Test async-ga, genome_frozenliteral
        run: |
          export ASYNC_GA_GENOME_FLAVOR="genome_frozenliteral"
          ./kernel-async-ga/compile.sh
          ./kernel-async-ga/execute.sh

      - name: Test async-ga, genome_bitdrift
        run: |
          export ASYNC_GA_GENOME_FLAVOR="genome_bitdrift"
          export ASYNC_GA_NCYCLE_AT_LEAST=0
          export ASYNC_GA_MSEC_AT_LEAST=0
          export ASYNC_GA_TSC_AT_LEAST=1000
          ./kernel-async-ga/compile.sh
          ./kernel-async-ga/execute.sh

      - name: Test async-ga, genome_hsurftiltedsticky
        run: |
          export ASYNC_GA_GENOME_FLAVOR="genome_hsurftiltedsticky"
          ./kernel-async-ga/compile.sh
          ./kernel-async-ga/execute.sh

      - name: Test async-ga, genome_purifyingonly
        run: |
          export ASYNC_GA_GENOME_FLAVOR="genome_purifyingonly"
          ./kernel-async-ga/compile.sh
          ./kernel-async-ga/execute.sh

      - name: Test async-ga, genome_purifyingplus
        run: |
          export ASYNC_GA_GENOME_FLAVOR="genome_purifyingplus"
          ./kernel-async-ga/compile.sh
          ./kernel-async-ga/execute.sh

      - name: Generate sample tagged populations
        run: ./kernel-async-ga/generate_sample_tagged_populations.sh

      - name: Upload output as artifact
        uses: actions/upload-artifact@v2
        with:
          name: sample-tagged-populations
          path: ./kernel-async-ga/a=concatenated_genomes+flavor=genome_hsurftiltedsticky_tagged+ext=.csv

  test-cerebraslib:
    name: Test cerebraslib
    runs-on: ubuntu-latest
    if: ${{ github.event.repository.name == 'wse-sketches-mirror' }}
    env:
      CSLC: cslc
      CS_PYTHON: cs_python
      SINGULARITYENV_CSL_SUPPRESS_SIMFAB_TRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

      - name: Set up Apptainer
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm2cpio
          sudo apt-get install -y golang-go
          mkdir -p ~/apptainer
          # echo 'export PATH="$HOME/apptainer/bin:$PATH"' >> ~/.bashrc
          echo "$HOME/apptainer/bin" >> $GITHUB_PATH
          curl -s https://raw.githubusercontent.com/apptainer/apptainer/d77d6f1eb099855f284a482992140d5eeb18be8a/tools/install-unprivileged.sh | bash -s - ~/apptainer

      - name: Test Apptainer
        run: |
          apptainer --version

      - name: Set up SDK
        run: |
          mkdir -p ~/cerebras/bin
          curl -L "${CEREBRAS_SDK_URL}" | tar -xzv -C ~/cerebras/bin
          echo "$HOME/cerebras/bin" >> $GITHUB_PATH
        env:
          CEREBRAS_SDK_URL: ${{ secrets.CEREBRAS_SDK_URL }}

      - name: Test SDK
        run: |
          cslc -h
          csdb --help
          cs_python -h
          cs_readelf -h
          sdk_debug_shell --help
          echo "SINGULARITYENV_CSL_SUPPRESS_SIMFAB_TRACE ${SINGULARITYENV_CSL_SUPPRESS_SIMFAB_TRACE}"

      - name: Test cerebraslib
        run: |
          ./kernel-test-cerebraslib/compile.sh
          ./kernel-test-cerebraslib/execute.sh

  binder:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          sudo apt-get update -y
          sudo apt-get install -y ghostscript
          python3 -m pip install pip --upgrade
          python3 -m pip install -r requirements.txt
      # Adapted from https://askubuntu.com/a/524368
      - run: ./binder/execute_notebooks.sh
      # adapted from https://unix.stackexchange.com/a/545630
      - run: find -type f -name "*.pdf" -exec bash -c 'gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen -dNOPAUSE -dBATCH -dQUIET -sOutputFile="new.pdf" "{}"; rm "{}"; mv "new.pdf" "{}";' {} \;
      - run: rm -rf .git
      - run: git init
      - uses: fregante/setup-git-user@v1
      - run: git commit --allow-empty -m "Initial commit"
      - uses: JamesIves/github-pages-deploy-action@4.0.0
        with:
          branch: binder # The branch the action should deploy to.
          folder: "${{ github.workspace }}" # The folder the action should deploy.

  push-to-mirror:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' && github.event.repository.name == 'wse-sketches-mirror' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false
      - uses: fregante/setup-git-user@v2
      - name: Push to mirror
        run: |
          git status
          git log
          git remote set-url origin https://mmore500:${HUBGIT_AUTH_TOKEN}@github.com/mmore500/wse-sketches.git
          git push origin master:master
        env:
          HUBGIT_AUTH_TOKEN: ${{ secrets.HUBGIT_AUTH_TOKEN }}


  latex:
    name: Latex Build
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/mmore500/teximage:sha-77b8179
      # github actions requires root to access mounted volumes
      options: --user root
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - run: (make -C tex/ || (cat tex/*.log && false))
      - name: Upload output as artifact
        uses: actions/upload-artifact@v2
        with:
          name: manuscript
          path: tex/${{ github.event.repository.name }}-draft.pdf
      - run: (make -C tex-access-proposal/ || (cat tex-access-proposal/*.log && false))
      - name: Upload output as artifact
        uses: actions/upload-artifact@v2
        with:
          name: access-proposal
          path: tex-access-proposal/${{ github.event.repository.name }}-draft.pdf

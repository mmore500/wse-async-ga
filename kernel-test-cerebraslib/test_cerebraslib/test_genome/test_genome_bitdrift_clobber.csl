const random = @import_module("<random>");

const genome_bitdrift = @import_module("cerebraslib/genome/genome_bitdrift.csl", .{
    .peId = 0,
});


fn test_builtin_random_seeding() void {
    random.set_global_prng_seed(1);
    const first = @random16();
    @assert(first != @random16());
    random.set_global_prng_seed(1);
    @assert(first == @random16());
}


fn test_elapse_inheritance_of() void {
    var genome = @zeros(genome_bitdrift.genome_t);
    genome_bitdrift.elapse_inheritance_of(&genome);
}


fn test_calc_fitness_of() void {
    var genome = @zeros(genome_bitdrift.genome_t);
    @assert(genome_bitdrift.calc_fitness_of(&genome) == 0.0);
}

fn test_get_trait_value() void {
    var genome = @zeros(genome_bitdrift.genome_t);
    @assert(genome_bitdrift.get_trait_value(&genome) == 0);
    @assert(
        genome_bitdrift.get_trait_value(&genome)
        < @as(u32, genome_bitdrift.nTraitVals)
    );
}

fn test_initialize_one() void {
    var genome = @zeros(genome_bitdrift.genome_t);
    genome_bitdrift.initialize_one(&genome);
}

fn test_clobber_immigrant() void {
    random.set_global_prng_seed(1);
    var immigrant = @zeros(genome_bitdrift.genome_t);
    var immigrant_ptr = @ptrcast(genome_bitdrift.genomePtr_t, &immigrant[0]);
    genome_bitdrift.initialize_one(immigrant_ptr);
    @assert(immigrant[0] | immigrant[1] | immigrant[2] != 0);

    var resident = @zeros(genome_bitdrift.genome_t);
    var resident_ptr = @ptrcast(genome_bitdrift.genomePtr_t, &resident[0]);
    genome_bitdrift.initialize_one(resident_ptr);
    @assert(resident[0] | resident[1] | resident[2] != 0);

    genome_bitdrift.clobber_immigrant(resident_ptr, immigrant_ptr);
    @assert(immigrant[0] | immigrant[1] | immigrant[2] != 0);

    genome_bitdrift.initialize_one(immigrant_ptr);
    @assert(immigrant[0] | immigrant[1] | immigrant[2] != 0);
    var empty_resident = @zeros(genome_bitdrift.genome_t);
    var empty_resident_ptr = @ptrcast(
        genome_bitdrift.genomePtr_t, &empty_resident[0]
    );
    genome_bitdrift.clobber_immigrant(empty_resident_ptr, immigrant_ptr);
    @assert(immigrant[0] | immigrant[1] | immigrant[2] != 0);
}

fn do_test() void {
    test_builtin_random_seeding();
    test_calc_fitness_of();
    test_elapse_inheritance_of();
    test_get_trait_value();
    test_initialize_one();
    test_clobber_immigrant();
}

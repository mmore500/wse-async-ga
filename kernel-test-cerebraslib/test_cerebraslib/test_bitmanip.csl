const random = @import_module("<random>");

const bitmanip = @import_module("cerebraslib/bitmanip.csl");


fn test_flip_nth_bit() void {
    var bitfield = @zeros([2]u8); // Initialize a 2-byte bitfield

    bitmanip.flip_nth_bit(&bitfield, 0);
    @assert(bitfield[0] == 0b00000001);
    @assert(bitfield[1] == 0b00000000);

    bitmanip.flip_nth_bit(&bitfield, 1);
    @assert(bitfield[0] == 0b00000011);
    @assert(bitfield[1] == 0b00000000);

    bitmanip.flip_nth_bit(&bitfield, 7);
    @assert(bitfield[0] == 0b10000011);
    @assert(bitfield[1] == 0b00000000);

    bitmanip.flip_nth_bit(&bitfield, 8);
    @assert(bitfield[0] == 0b10000011);
    @assert(bitfield[1] == 0b00000001);

    // Flip the same bit again to revert it back
    bitmanip.flip_nth_bit(&bitfield, 8);
    @assert(bitfield[0] == 0b10000011);
    @assert(bitfield[1] == 0b000000000);

    bitmanip.flip_nth_bit(&bitfield, 1);
    @assert(bitfield[0] == 0b10000001);
    @assert(bitfield[1] == 0b00000000);

    bitmanip.flip_nth_bit(&bitfield, 15);
    @assert(bitfield[0] == 0b10000001);
    @assert(bitfield[1] == 0b10000000);
}

fn test_set_nth_bit() void {
    var bitfield = @zeros([2]u8); // Initialize a 2-byte bitfield

    bitmanip.set_nth_bit(&bitfield, 0, false);
    @assert(bitfield[0] == 0b00000000);
    @assert(bitfield[1] == 0b00000000);

    bitmanip.set_nth_bit(&bitfield, 0, true);
    @assert(bitfield[0] == 0b00000001);
    @assert(bitfield[1] == 0b00000000);

    bitmanip.set_nth_bit(&bitfield, 0, true);
    @assert(bitfield[0] == 0b00000001);
    @assert(bitfield[1] == 0b00000000);

    bitmanip.set_nth_bit(&bitfield, 1, true);
    @assert(bitfield[0] == 0b00000011);
    @assert(bitfield[1] == 0b00000000);

    bitmanip.set_nth_bit(&bitfield, 7, true);
    @assert(bitfield[0] == 0b10000011);
    @assert(bitfield[1] == 0b00000000);

    bitmanip.set_nth_bit(&bitfield, 1, false);
    @assert(bitfield[0] == 0b10000001);
    @assert(bitfield[1] == 0b00000000);

    bitmanip.set_nth_bit(&bitfield, 8, true);
    @assert(bitfield[0] == 0b10000001);
    @assert(bitfield[1] == 0b00000001);

    bitmanip.set_nth_bit(&bitfield, 8, false);
    @assert(bitfield[0] == 0b10000001);
    @assert(bitfield[1] == 0b00000000);
}

fn test_flip_nth_bit_bigendian() void {
    var bitfield = @zeros([8]u8); // Initialize a 2-word bitfield

    bitmanip.flip_nth_bit_bigendian(&bitfield, 0);
    @assert(bitfield[3] == 0b00000001);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.flip_nth_bit_bigendian(&bitfield, 1);
    @assert(bitfield[3] == 0b00000011);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.flip_nth_bit_bigendian(&bitfield, 7);
    @assert(bitfield[3] == 0b10000011);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.flip_nth_bit_bigendian(&bitfield, 8);
    @assert(bitfield[3] == 0b10000011);
    @assert(bitfield[2] == 0b00000001);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    // Flip the same bit again to revert it back
    bitmanip.flip_nth_bit_bigendian(&bitfield, 8);
    @assert(bitfield[3] == 0b10000011);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.flip_nth_bit_bigendian(&bitfield, 1);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.flip_nth_bit_bigendian(&bitfield, 15);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b10000000);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.flip_nth_bit_bigendian(&bitfield, 16);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b10000000);
    @assert(bitfield[1] == 0b00000001);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.flip_nth_bit_bigendian(&bitfield, 30);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b10000000);
    @assert(bitfield[1] == 0b00000001);
    @assert(bitfield[0] == 0b01000000);

    bitmanip.flip_nth_bit_bigendian(&bitfield, 32);
    @assert(bitfield[7] == 0b00000001);
    @assert(bitfield[6] == 0b00000000);
    @assert(bitfield[5] == 0b00000000);
    @assert(bitfield[4] == 0b00000000);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b10000000);
    @assert(bitfield[1] == 0b00000001);
    @assert(bitfield[0] == 0b01000000);

    bitmanip.flip_nth_bit_bigendian(&bitfield, 32);
    @assert(bitfield[7] == 0b00000000);
    @assert(bitfield[6] == 0b00000000);
    @assert(bitfield[5] == 0b00000000);
    @assert(bitfield[4] == 0b00000000);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b10000000);
    @assert(bitfield[1] == 0b00000001);
    @assert(bitfield[0] == 0b01000000);

    bitmanip.flip_nth_bit_bigendian(&bitfield, 41);
    @assert(bitfield[7] == 0b00000000);
    @assert(bitfield[6] == 0b00000010);
    @assert(bitfield[5] == 0b00000000);
    @assert(bitfield[4] == 0b00000000);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b10000000);
    @assert(bitfield[1] == 0b00000001);
    @assert(bitfield[0] == 0b01000000);
}

fn test_set_nth_bit_bigendian() void {
    var bitfield = @zeros([8]u8); // Initialize a 2-word bitfield

    bitmanip.set_nth_bit_bigendian(&bitfield, 0, false);
    @assert(bitfield[3] == 0b00000000);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.set_nth_bit_bigendian(&bitfield, 0, true);
    @assert(bitfield[3] == 0b00000001);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.set_nth_bit_bigendian(&bitfield, 0, true);
    @assert(bitfield[3] == 0b00000001);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.set_nth_bit_bigendian(&bitfield, 1, true);
    @assert(bitfield[3] == 0b00000011);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.set_nth_bit_bigendian(&bitfield, 7, true);
    @assert(bitfield[3] == 0b10000011);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.set_nth_bit_bigendian(&bitfield, 1, false);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.set_nth_bit_bigendian(&bitfield, 8, true);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b00000001);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.set_nth_bit_bigendian(&bitfield, 8, false);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.set_nth_bit_bigendian(&bitfield, 16, false);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.set_nth_bit_bigendian(&bitfield, 31, false);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000000);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.set_nth_bit_bigendian(&bitfield, 17, true);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000010);
    @assert(bitfield[0] == 0b00000000);

    bitmanip.set_nth_bit_bigendian(&bitfield, 31, true);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000010);
    @assert(bitfield[0] == 0b10000000);

    bitmanip.set_nth_bit_bigendian(&bitfield, 32, true);
    @assert(bitfield[7] == 0b00000001);
    @assert(bitfield[6] == 0b00000000);
    @assert(bitfield[5] == 0b00000000);
    @assert(bitfield[4] == 0b00000000);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000010);
    @assert(bitfield[0] == 0b10000000);

    bitmanip.set_nth_bit_bigendian(&bitfield, 41, true);
    @assert(bitfield[7] == 0b00000001);
    @assert(bitfield[6] == 0b00000010);
    @assert(bitfield[5] == 0b00000000);
    @assert(bitfield[4] == 0b00000000);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000010);
    @assert(bitfield[0] == 0b10000000);

    bitmanip.set_nth_bit_bigendian(&bitfield, 32, false);
    @assert(bitfield[7] == 0b00000000);
    @assert(bitfield[6] == 0b00000010);
    @assert(bitfield[5] == 0b00000000);
    @assert(bitfield[4] == 0b00000000);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000010);
    @assert(bitfield[0] == 0b10000000);

    bitmanip.set_nth_bit_bigendian(&bitfield, 34, false);
    @assert(bitfield[7] == 0b00000000);
    @assert(bitfield[6] == 0b00000010);
    @assert(bitfield[5] == 0b00000000);
    @assert(bitfield[4] == 0b00000000);
    @assert(bitfield[3] == 0b10000001);
    @assert(bitfield[2] == 0b00000000);
    @assert(bitfield[1] == 0b00000010);
    @assert(bitfield[0] == 0b10000000);
}

fn test_randomize() void {
    random.set_global_prng_seed(1);
    var bitfield = @zeros([2]u16); // Initialize a 2-byte bitfield

    bitmanip.randomize(&bitfield, 0);
    @assert(bitfield[0] == 0);
    @assert(bitfield[1] == 0);

    bitmanip.randomize(&bitfield, 1);
    @assert(bitfield[0] != 0);
    @assert(bitfield[1] == 0);

    bitmanip.randomize(&bitfield, 2);
    @assert(bitfield[0] != 0);
    @assert(bitfield[1] != 0);
}

fn do_test() void {
    test_flip_nth_bit();
    test_set_nth_bit();
    test_flip_nth_bit_bigendian();
    test_set_nth_bit_bigendian();
    test_randomize();
}
